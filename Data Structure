#include <stdio.h>
#include <stdlib.h>

// Define a struct called 'node' to represent a node in the binary tree
typedef struct node
{
    int number;           // Value stored in the node
    struct node *left;    // Pointer to the left child node
    struct node *right;   // Pointer to the right child node
}
node;

// Function prototypes
void free_tree(node *root);   // Function to free the memory allocated for the tree
void print_tree(node *root);  // Function to print the tree in an in-order traversal

int main(void)
{
    node *tree = NULL;   // Pointer to the root node of the tree

    // Create a new node and assign it to 'tree'
    node *n = malloc(sizeof(node));
    if (n == NULL)
    {
        return 1;
    }
    n->number = 2;
    n->left = NULL;
    n->right = NULL;
    tree = n;

    // Create a new node and assign it as the left child of 'tree'
    n = malloc(sizeof(node));
    if (n == NULL)
    {
        free_tree(tree);
        return 1;
    }
    n->number = 1;
    n->left = NULL;
    n->right = NULL;
    tree->left = n;

    // Create a new node and assign it as the right child of 'tree'
    n = malloc(sizeof(node));
    if (n == NULL)
    {
        free_tree(tree);
        return 1;
    }
    n->number = 3;
    n->left = NULL;
    n->right = NULL;
    tree->right = n;

    // Print the tree in an in-order traversal
    print_tree(tree);

    // Free the memory allocated for the tree
    free_tree(tree);
    return 0;
}

// Recursive function to free the memory allocated for the tree
void free_tree(node *root)
{
    if (root == NULL)
    {
        return;
    }
    free_tree(root->left);    // Free the left subtree
    free_tree(root->right);   // Free the right subtree
    free(root);               // Free the current node
}

// Recursive function to print the tree in an in-order traversal
void print_tree(node *root)
{
    if (root == NULL)
    {
        return;
    }
    print_tree(root->left);   // Print the left subtree
    printf("%i\n", root->number);   // Print the current node's value
    print_tree(root->right);  // Print the right subtree
}
